////
/// @group ob-navigation
////

@use "sass:map";
@use "../../../a.settings/a.basic-tokens/b.layout/b.container-widths" as cw;

/// # Navigation Menu
///
/// Common patterns for navigation menus. Separated into several aspects.

/// Breakpoint for switching to wide layout.
$nav-wide: map.get(cw.$widths, "sm");

/// Size factor of the menu.
$size: 2em;

/// General navigation menu. This is the basic selector with the basic rules applied.
nav.e-menu {
  --item-block-size: #{$size};
  position: relative;
  z-index: 1;

  & > input[id^="-toggle-state"],
  & > label[for^="-toggle-state"] {
    display: none;
  }
}

/// Levelable Nav.
/// Places items on a horizontal level if enough space is available.
nav.e-menu.\+levelable {
  & > menu {
    display: block;

    & > li {
      display: block;
      text-align: start;
    }

    // Horizontal nav on wider screen.
    @media (min-width: $nav-wide) {
      display: flex;

      & > li {
        flex: 1;
        text-align: center;
      }
    }
  }
}

// Nav folded.
@mixin toggle-folded {
  background: var(--toggle-folded-background, var(--toggle-background));
  border: var(--toggle-folded-border, var(--toggle-border));
  border-radius: var(--toggle-folded-radius, var(--toggle-radius));
  box-shadow: var(--toggle-folded-shadow, var(--toggle-shadow));
  content: var(--toggle-folded-content, var(--toggle-content, "⋯"));
}

/// Foldable Nav.
/// Allows to toggle the display of the menu.
nav.e-menu.\+foldable {
  --toggle-size: #{$size};
  --inset-start: var(--toggle-size);
  --inset-end: 0;
  --folded-inset: var(--inset-start) 100%;
  --toggle-inset: 0 auto;

  /// Places toggle to the inline end (rhs in Latin).
  &.\+end {
    --inset-start: 0;
    --inset-end: var(--toggle-size);
    --folded-inset: 100% var(--inset-end);
    --toggle-inset: auto 0;
  }

  & > label[for^="-toggle-state"] {
    cursor: context-menu;
    display: block;

    & > :first-child,
    &:empty::before {
      display: block;
      position: absolute;
      inset-block-start: 0;
      inset-inline: var(--toggle-inset);
      inline-size: var(--toggle-size);
      block-size: var(--toggle-size);
      padding: var(--toggle-padding);
      border: var(--toggle-border);
      margin: 0;
      font-size: calc(var(--toggle-size) - 2 * var(--toggle-padding));
      line-height: 1;
      text-align: center;
      font-weight: var(--weight-emphasis);
      transition: all 0.3s var(--easing-standard);
      background: var(--toggle-background);
      border-radius: var(--toggle-radius);
      box-shadow: var(--toggle-shadow);
      content: var(--toggle-content, "⋮");
    }
  }

  & > menu {
    position: absolute;
    inset-block-start: 0;
    inset-inline: var(--inset-start) var(--inset-end);
    overflow: hidden;
    transition: inset-inline 0.3s var(--easing-standard);
  }

  @media (max-width: calc($nav-wide - 1px)) {
    // Backdrop when unfolded on small screen.
    & input[id^="-toggle-state"]:checked ~ label[for^="-toggle-state"] {
      position: absolute;
      inset: 0;
      margin: 0;
      inline-size: 100vw;
      block-size: 100vh;
      background: rgba(0, 0, 0, 0.5);
    }

    & input[id^="-toggle-state"]:not(:checked) {
      & ~ menu {
        inset-inline: var(--folded-inset);
      }

      & ~ label[for^="-toggle-state"] > :first-child,
      & ~ label[for^="-toggle-state"]:empty::before {
        @include toggle-folded;
      }
    }
  }

  @media (min-width: $nav-wide) {
    & input[id^="-toggle-state"]:checked {
      & ~ menu {
        inset-inline: var(--folded-inset);
      }

      & ~ label[for^="-toggle-state"] > :first-child,
      & ~ label[for^="-toggle-state"]:empty::before {
        @include toggle-folded;
      }
    }
  }
}

/// Sticky Nav.
/// Makes navbar stick to the top of the viewport.
nav.e-menu.\+sticky {
  position: sticky;
  inset-block-start: 0;
  z-index: 1;
}
