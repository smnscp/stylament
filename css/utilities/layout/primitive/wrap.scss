////
/// @group ut-layout
////

/// ### Wrap
///
/// Layout utilities to control how successive elements are wrapped in lines.

/// General sizing and spacing for wrap layouts.
/// @name All wrap layouts
[class^="lyo-wrap-"],
[class*=" lyo-wrap-"] {
  --min-column-size: calc(0.7 * var(--measure));
  gap: var(--spacing-block) var(--spacing-inline);

  &:is(article, section) {
    gap: var(--flow-space-sectioning);
  }
}

/// Do not apply [flow space](ax-generic.html#flow-spacing) in flex or grid layout.
/// Note: Once [container style queries][spec:style-container] have sufficient browser
/// support this can be done as a generic flow rule.
///
/// [spec:style-container]: https://www.w3.org/TR/css-contain-3/#style-container
///
/// @name All wrap layout children
:is([class^="lyo-wrap-"], [class*=" lyo-wrap-"]) > * {
  margin-block: 0;
}

/// Wrap in a grid: Get equal columns over all rows.
///
/// Custom properties:
/// * `--min-column-size` {number} [70% of current measure]: The minimum size of columns.
/// * `--fill-method` {auto-fill|auto-fit}: Use [`auto-fill`][mdn:auto-fill] to get empty
///   filler columns if there are too few grid items for one row. Use [`auto-fit`][mdn:auto-fit]
///   to prevent that behaviour and give all space to the filled columns.
///
/// [mdn:auto-fill]: https://developer.mozilla.org/en-US/docs/Web/CSS/repeat#auto-fill
/// [mdn:auto-fit]: https://developer.mozilla.org/en-US/docs/Web/CSS/repeat#auto-fit
.lyo-wrap-grid {
  --fill-method: auto-fill;
  display: grid;
  grid-template-columns: repeat(
    var(--fill-method),
    minmax(min(100%, var(--min-column-size)), 1fr)
  );
}

/// Grid layout with fitting under-full grids.
/// @name Modifier: +fit
.lyo-wrap-grid.\+fit,
%lyo-wrap-grid--fit {
  --fill-method: auto-fit;
}

/// Wrap in flexible rows: Similar to the grid, but with the width of columns determined
/// individually based on the number of columns in each row. **Example:** Given five items and a
/// container that can take three of them in a row, the second row will made up of the two
/// remaininng items taking up one half of the space each, instead of leaving the last third
/// empty.
///
/// Custom properties:
/// * `--min-column-size` {number} [70% of current measure]: The minimum size of columns.
.lyo-wrap-flex {
  display: flex;
  flex-wrap: wrap;

  & > * {
    flex-basis: var(--min-column-size);
    flex-grow: 1;
  }
}

/// Wrap as cluster (densely packed).
.lyo-wrap-cluster {
  display: flex;
  flex-wrap: wrap;
  justify-content: start;
  align-items: start;
}

/// Cluster layout with centered alignment.
/// @name Modifier: +center
.lyo-wrap-cluster.\+center,
%lyo-wrap-cluster--center {
  justify-content: center;
}

/// Cluster layout with alignment to the end.
/// @name Modifier: +end
.lyo-wrap-cluster.\+end,
%lyo-wrap-cluster--end {
  justify-content: end;
}

/// Cluster layout with justified alignment.
/// @name Modifier: +justified
.lyo-wrap-cluster.\+justified,
%lyo-wrap-cluster--justified {
  justify-content: space-between;
}

/// Reset wrapping: Let this item claim the space of the whole row.
.lyo-reset-wrap {
  grid-column: 1 / -1 !important;
  max-inline-size: unset !important;
  flex: 100% !important;
}
