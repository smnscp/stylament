////
/// @group ob-variant
////

@use "sass:map";
@use "../../../../axioms/properties/io" as *;
@use "../../../../axioms/properties/specific/layout/container";
@use "../../../../axioms/generic/coloring";
@use "../../../../utilities/layout/primitive/switcher";

/// ## Foldable Navigation Menu
///

// One archaic tool for maintaining popover state.
$rock: 'input[type="checkbox"][hidden]';
$rockOn: "#{$rock}:checked";
$rockOff: "#{$rock}:not(:checked)";
$rockToggle: 'label[role="switch"]';
// The new way to pop.
$pop: "menu[popover]";
$popOn: "#{$pop}:popover-open";
$popOff: "#{$pop}:not(:popover-open)";
$popToggle: "button[popovertarget]";
// Use :target to toggle the menu. Ain’t that punk?
$punk: 'div[role="switch"]';
$punkOn: "#{$punk}:target";
$punkOff: "#{$punk}:not(:target)";
$punkToggle: #{$punk};
$anyToggle: "#{$popToggle}, #{$rockToggle}, #{$punkToggle}";

/// Toggle.
@mixin toggle {
  @include coloring.use-colors;
  display: block; // Fallback
  display: grid; // More robust content placement.
  position: relative; // Place over backdrop.
  max-inline-size: unset;
  inline-size: var(---toggle-size);
  block-size: var(---toggle-size);
  padding: var(---toggle-padding);
  border: var(---toggle-border);
  margin: 0;
  font-size: calc(var(---toggle-size) - 2 * var(---toggle-padding));
  line-height: 1;
  text-align: center;
  place-content: center center;
  font-weight: svar(font-weight-emphasis);
  transition: all 0.3s svar(easing-default);
  border-radius: var(---toggle-radius);
  box-shadow: var(---toggle-shadow);
  content: var(---toggle-content, "⋮");
}

/// Toggle when folded.
@mixin toggle-off {
  display: block;
  display: grid;
  border: var(---toggle-folded-border, var(---toggle-border));
  border-radius: var(---toggle-folded-radius, var(---toggle-radius));
  box-shadow: var(---toggle-folded-shadow, var(---toggle-shadow));
  content: var(---toggle-folded-content, var(---toggle-content, "⋯"));
}

/// Common traits of foldable menu.
/// Allows to toggle the display of the menu.
@mixin menu-foldable {
  // Toggle container
  & > :is(#{$anyToggle}) {
    cursor: context-menu;
    display: block;
    @include coloring.set-colors("nav-toggle", "alternate");

    // Actual toggle area: first child or pseudo content.
    & > *,
    &:empty::after {
      @include toggle;
    }

    // Hide potential other children (i. e. folded state button).
    & > * + * {
      display: none;
    }
  }

  & > menu {
    position: relative; // Place menu over backdrop.
    margin-block-end: -100%; // Do not occupy flow space when foldable.
    margin-inline: 0; // Stick to toggle. (Revert potential center layout.)
    max-inline-size: 100%;
    inline-size: auto;
    overflow: hidden;
    transition: max-inline-size 0.3s svar(easing-default);
  }

  // Toggle when unfolded.
  & > #{$popToggle}:has(~ #{$popOn}) {
    position: fixed;
    inset-block-start: 0;
  }

  // Position popover at top of viewport.
  & > #{$pop} {
    position: fixed;
    inset: 0;
    margin-inline: var(---toggle-size) auto;
  }

  // Menu when folded.
  & > #{$punkOff},
  & > #{$popToggle}:has(~ #{$popOff}),
  & > #{$rockOff} ~ #{$rockToggle} {
    & ~ menu {
      max-inline-size: 0;
      padding-inline: 0;
      border-inline: 0;
    }

    & > :last-child,
    &:empty::after {
      @include toggle-off;
    }

    & > :not(:last-child) {
      display: none;
    }
  }
}

@mixin backdrop {
  // Legacy popover:
  // Extend close button area as backdrop.
  & > #{$punkOn} > :first-child::after,
  // Use `label` as backdrop. Clicking on it toggles the state.
  & > #{$rockOn} ~ #{$rockToggle}::before {
    content: "";
    position: fixed;
    z-index: -1;
    inset: 0;
    block-size: 100vh;
    background: rgba(0, 0, 0, 0.5);
  }

  // Native popover backdrop.
  & > #{$pop}::backdrop {
    position: fixed;
    inset: var(---toggle-size) 0 0;
    background: rgba(0, 0, 0, 0.5);
  }
}
