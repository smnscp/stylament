////
/// @group ob-variant
////

@use "sass:map";
@use "../../../axioms/properties/settings" as *;
@use "../../../axioms/properties/specific/layout/container";
@use "../../../axioms/generic/coloring";
@use "../../../utilities/layout/primitive/switcher";

/// ## Navigation Menu
///
/// Common patterns for navigation menus. Separated into several aspects.

/// Breakpoint for switching to wide layout.
/// @requires {variable} sizes@container
$nav-wide: map.get(container.$sizes, "sm");

/// Size factor of the menu.
/// @name size (menu)
$size: 2em;

/// General navigation menu. This is the basic selector with the basic rules applied.
nav.var-menu {
  ---item-block-size: #{$size};
  display: flex;
  flex-direction: row;
  align-items: flex-start;

  & > input[id^="-toggle-state"],
  & > label[for^="-toggle-state"] {
    display: none;
  }

  & > menu {
    flex-grow: 1;
  }
}

/// Levelable menu.
/// Places items on a horizontal level if enough space is available.
/// @name Modifier: +levelable
nav.var-menu.\+levelable {
  & > menu {
    // Horizontal nav as long as items have enough space.
    ---threshold: #{$nav-wide};
    @extend .lyo-switcher;
    & > li {
      display: block;
      text-align: center;
    }
  }
}

/// Menu when folded.
@mixin menu-folded {
  max-inline-size: 0;
}

/// Toggle when folded.
@mixin toggle-folded {
  border: var(---toggle-folded-border, var(---toggle-border));
  border-radius: var(---toggle-folded-radius, var(---toggle-radius));
  box-shadow: var(---toggle-folded-shadow, var(---toggle-shadow));
  content: var(---toggle-folded-content, var(---toggle-content, "â‹¯"));
}

/// Common traits of foldable menu.
/// Allows to toggle the display of the menu.
@mixin menu-foldable {
  ---toggle-size: #{$size};

  & > label[for^="-toggle-state"] {
    cursor: context-menu;
    display: block;
    @include coloring.set-colors("nav-toggle", "alternate");

    // Toggle
    & > :first-child,
    &:empty::after {
      @include coloring.use-colors;
      display: block;
      position: relative; // Place over backdrop.
      max-inline-size: unset;
      inline-size: var(---toggle-size);
      block-size: var(---toggle-size);
      padding: var(---toggle-padding);
      border: var(---toggle-border);
      margin: 0;
      font-size: calc(var(---toggle-size) - 2 * var(---toggle-padding));
      line-height: 1;
      text-align: center;
      font-weight: var(#{$ðŸŒ±}font-weight-emphasis);
      transition: all 0.3s var(#{$ðŸŒ±}easing-default);
      border-radius: var(---toggle-radius);
      box-shadow: var(---toggle-shadow);
      content: var(---toggle-content, "â‹®");
    }
  }

  & > menu {
    margin-bottom: -100%; // Do not occupy flow space when foldable.
    max-inline-size: 100%;
    overflow: hidden;
    transition: max-inline-size 0.3s var(#{$ðŸŒ±}easing-default);
  }
}

/// Always foldable menu.
/// @name Modifier: +foldable
nav.var-menu.\+foldable,
nav.var-menu.\+foldable-when-stacked:where(:not(.\+levelable)) {
  @include menu-foldable;

  // Folded state on wide screen. (Only when explicitly toggled.)
  @media (min-width: $nav-wide) {
    & > input[id^="-toggle-state"]:checked {
      & ~ menu {
        @include menu-folded;
      }

      & ~ label[for^="-toggle-state"] > :first-child,
      & ~ label[for^="-toggle-state"]:empty::after {
        @include toggle-folded;
      }
    }
  }
}

/// Menu foldable only when stacked.
/// @name Modifier: +foldable-when-stacked
nav.var-menu.\+foldable-when-stacked {
  @media (max-width: $nav-wide) {
    @include menu-foldable;
  }
}

/// Special behavior on narrow screen: Act as overlay with backdrop.
/// @name Modal menu on narrow screen
nav.var-menu.\+foldable,
nav.var-menu.\+foldable-when-stacked {
  @media (max-width: $nav-wide) {
    & > input[id^="-toggle-state"] {
      // Unfolded state on narrow screen.
      &:checked {
        // Use `label` as backdrop. Clicking on it toggles the state.
        & ~ label[for^="-toggle-state"]::before {
          content: "";
          position: absolute;
          inset: 0;
          block-size: 100vh;
          background: rgba(0, 0, 0, 0.5);
        }
      }

      // Folded state on narrow screen. (This is the default, as in not checked.)
      &:not(:checked) {
        & ~ menu {
          @include menu-folded;
        }

        & ~ label[for^="-toggle-state"] > :first-child,
        & ~ label[for^="-toggle-state"]:empty::after {
          @include toggle-folded;
        }
      }
    }

    & > menu {
      position: relative; // Place over backdrop.
    }
  }
}

/// Places toggle to the inline end (rhs in Latin).
/// This only has an effect if the menu is foldable.
/// @name Modifier: +end
nav.var-menu.\+end {
  flex-direction: row-reverse;
}

/// Sticky menu.
/// Makes navbar stick to the top of the viewport.
/// @name Modifier: +sticky
nav.var-menu.\+sticky {
  position: sticky;
  inset-block-start: 0;
  z-index: 1;
}
