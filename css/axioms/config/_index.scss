////
/// @group ax-config
////

/// # Global Configuration
///
/// The lowest layer of Stylament is a global configuration object. From this,
/// [a set of CSS custom properties](./ax-properties.html) will be generated.
/// In contrast to that flat list of variables, this configuration object is a
/// hierachical map. By using [mapping functions](#mapping) and [aliases](#config-examples)
/// it reflects the relationships between properties.
///
/// There is a [default configuration](#variable--default) tree that
/// will be merged with your [custom configuration](#variable--custom).

@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "mapping";
@use "implicit";

/// Configuration to be injected by consumers.
/// This map is defined by passing `$config-custom` to Stylament.
/// For the structure of this custom configuration see [$default](#variable--default).
///
/// @example scss - Using Stylament with custom configuration
///   @use "custom-config" as custom;
///   @use "stylament/css/axioms" with ($config-custom: custom.$config);
///
/// @type Map
$custom: () !default;

/// Default configuration.
/// This also serves as a reference for your [custom configuration](#variable--custom).
///
/// <a name="config-examples"></a>
///
/// @example scss - Defining literal properties
///   $cfg: (
///     layout: (
///       spacing: (
///         literal: (
///           block: "var(--length-l1)",
///           inline: 4ch,
///         ),
///       ),
///     ),
///   );
///
/// @example css - Result
///   :root {
///     --spacing-block: var(--length-l1);
///     --spacing-inline: 4ch;
///   }
///
/// @example scss - Defining logical properties (aliases)
///   $cfg: (
///     typography: (
///       measure: (
///         logical: (
///           default: md,
///         ),
///       ),
///     ),
///   );
///
/// @example css - Result
///   :root {
///     --measure-default: var(--measure-md);
///   }
///
/// @example scss - Defining mapped properties (calculated series)
///   @function radius($i) { @return (2 + $i) * 0.5rem; }
///
///   $cfg: (
///     ui: (
///       radius: (
///         mapped: (
///           domain: (sm: -1, md: 0, lg: 1),
///           function: get-function("radius"),
///         ),
///       ),
///     ),
///   );
///
/// @example css - Result
///   :root {
///     --radius-sm: 0.5rem;
///     --radius-md: 1rem;
///     --radius-lg: 1.5rem;
///   }
///
/// @type Map
$default: (
  layout: (
    length: (
      min: 2,
      max: 12,
      line: 4,
    ),
    container: (
      mapped: (
        domain: mapping.$domain-sizes,
        function: meta.get-function("container", $module: "mapping"),
      ),
      literal: (),
      logical: (
        page: "xl",
      ),
    ),
    spacing: (
      literal: (
        block: "var(--length-l1)",
        heading: "var(--length-l1)",
        sectioning:
          "clamp(var(--length-l1), (100vi - var(--container-sm)) / 4, var(--length-l2))",
        inline: 4ch,
        inline-small: 0.5ch,
      ),
      logical: (),
    ),
  ),
  typography: (
    font-family: (
      literal: (
        sans: (
          "Source Sans Pro",
          sans-serif,
        ),
        serif: (
          "Source Serif Pro",
          serif,
        ),
        mono: (
          "Source Code Pro",
          monospace,
        ),
      ),
      logical: (
        body: "serif",
        heading: "sans",
        display: "body",
      ),
    ),
    font-weight: (
      literal: (
        regular: 400,
        bold: 700,
      ),
      logical: (
        body: "regular",
        emphasis: "bold",
        heading: "bold",
      ),
    ),
    letter-spacing: (
      mapped: (
        domain: mapping.$domain-sizes,
        function: meta.get-function("letter", $module: "mapping"),
      ),
      logical: (
        none: md,
      ),
    ),
    line: (
      min: 1.1,
      root: 1.5,
      sub: 1,
    ),
    measure: (
      mapped: (
        domain: mapping.$domain-sizes,
        function: meta.get-function("measure", $module: "mapping"),
      ),
      literal: (
        full: 100%,
        inf: unset,
      ),
      logical: (
        default: md,
      ),
    ),
    scale: (
      min: -2,
      max: 9,
      base: 1em,
      // Major third, equal-tempered: ∛2 ≅ 1.26
      // https://www.modularscale.com/?1&em&2@3
      factor: math.pow(2, math.div(1, 3)),
      literal: (),
      logical: (),
    ),
  ),
  ui: (
    radius: (
      mapped: (
        domain: mapping.$domain-sizes,
        function: meta.get-function("radius", $module: "mapping"),
      ),
      literal: (
        100: 100%,
        full: 999rem,
      ),
    ),
    shadow: (
      mapped: (
        domain: mapping.$domain-sizes,
        function: meta.get-function("shadow", $module: "mapping"),
      ),
    ),
    stroke: (
      width: (
        min: 1,
        max: 8,
        line: 24,
        literal: (),
        logical: (
          default: 2,
        ),
      ),
      style: (
        literal: (
          default: "solid",
        ),
        logical: (),
      ),
      color: (
        literal: (
          default: "var(--color-tertiary-700)",
        ),
        logical: (),
      ),
    ),
  ),
  color: (
    palettes: (),
    literal: (),
    logical: (),
  ),
);

/// Map of all configuration values merged together.
/// This is used to look up configuration keys.
/// @type Map
/// @requires $default
/// @requires $custom
$merged: map.deep-merge($default, $custom);

/// Map of derived configuration values.
/// @type Map
/// @prop {Number<rem>} typography.rlh Root line height.
/// Absolute value mimicking the experimental CSS unit [`rlh`][mdn:rlh].
///
/// [mdn:rlh]: https://developer.mozilla.org/en-US/docs/Web/CSS/length#rlh
/// @prop {Unit} typography.scale.base-unit Base unit of the typographical scale.
/// @prop {Number<rem>} typography.scale.base-rem Base of the typographical scale in `rem`.
/// @requires derive
$derived: implicit.derive($merged);
