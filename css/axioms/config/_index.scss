////
/// @group ax-config
////

/// # Global Configuration
///
/// The lowest layer of Stylament is a global configuration object. From this,
/// [a set of CSS custom properties](./ax-properties.html) will be generated.
/// In contrast to that flat list of variables, this configuration object is a
/// hierachical map. By using [mapping functions](#mapping) and [aliases](#config-examples)
/// it reflects the relationships between properties.
///
/// There is a [default configuration](#variable--default) tree that
/// will be merged with your [custom configuration](#variable--custom).

@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "mapping";
@use "specific/typography";
@use "specific/ui/easing";
@use "../tools/arithmetic/function";
@use "../tools/typography/rhythm";

/// Configuration to be injected by consumers.
/// This map is defined by passing `$config-custom` to Stylament.
/// For the structure of this custom configuration see [$default](#variable--default).
///
/// @example scss - Using Stylament with custom configuration
///   @use "custom-config" as custom;
///   @use "stylament/css/axioms" with ($config-custom: custom.$config);
///
/// @type Map
$custom: () !default;

$-custom-with-typography: map.deep-merge(
  (
    typography: typography.$default,
  ),
  $custom
);
$-line-root: map.get($-custom-with-typography, typography, line, root);
$-scale-base: map.get($-custom-with-typography, typography, scale, base);
$-scale-ratio: map.get($-custom-with-typography, typography, scale, ratio);

/// Root line height.
/// Absolute value mimicking the experimental CSS unit [`rlh`][mdn:rlh].
/// @type Number<rem>
/// @access private
$-rlh: rhythm.rlh($-scale-base, $-line-root);

/// Default configuration.
/// This also serves as a reference for your [custom configuration](#variable--custom).
///
/// <a name="config-examples"></a>
///
/// @example scss - Defining literal properties
///   $cfg: (
///     layout: (
///       spacing: (
///         literal: (
///           block: "var(--length-1)",
///           inline: 4ch,
///         ),
///       ),
///     ),
///   );
///
/// @example css - Result
///   :root {
///     --spacing-block: var(--length-1);
///     --spacing-inline: 4ch;
///   }
///
/// @example scss - Defining logical properties (aliases)
///   $cfg: (
///     typography: (
///       measure: (
///         logical: (
///           default: md,
///         ),
///       ),
///     ),
///   );
///
/// @example css - Result
///   :root {
///     --measure-default: var(--measure-md);
///   }
///
/// @example scss - Defining mapped properties (calculated series)
///   @function radius($i) { @return (2 + $i) * 0.5rem; }
///
///   $cfg: (
///     ui: (
///       radius: (
///         mapped: (
///           domain: (sm: -1, md: 0, lg: 1),
///           function: get-function("radius"),
///         ),
///       ),
///     ),
///   );
///
/// @example css - Result
///   :root {
///     --radius-sm: 0.5rem;
///     --radius-md: 1rem;
///     --radius-lg: 1.5rem;
///   }
///
/// @type Map
$default: (
  layout: (
    length: (
      mapped: (
        domain: mapping.$domain-tendency,
        range: (
          // -1: 0aug, 0: 0½, 1: 1dim, 2: 1, …
          start: -1,
          end: 10,
        ),
        function: meta.get-function("quantize", $module: "mapping"),
        params: (
          unit: $-rlh,
          sub: 4,
        ),
      ),
    ),
    container: (
      mapped: (
        domain: mapping.$domain-sizes,
        // Use multiples of 16rem centered around 48rem.
        function: meta.get-function("linear", $module: "function"),
        params: (
          slope: 16rem,
          initial: 48rem,
        ),
      ),
      literal: (),
      logical: (
        page: "xl",
      ),
    ),
    flow-space: (
      literal: (
        default: "var(--spacing-block-sm)",
        heading: "var(--spacing-block-md)",
        list: 0em,
        deflist: "var(--spacing-block-sm)",
        sectioning:
          "clamp(var(--spacing-block-md), (100vi - var(--container-sm)) / 4, var(--spacing-block-lg))",
      ),
    ),
    spacing-block: (
      mapped: (
        domain: mapping.$domain-sizes,
        function: meta.get-function("exponential", $module: "function"),
        params: (
          base: 2,
          coefficient: $-rlh,
        ),
      ),
      logical: (
        default: md,
      ),
    ),
    spacing-inline: (
      mapped: (
        domain: mapping.$domain-sizes,
        function: meta.get-function("exponential", $module: "function"),
        params: (
          base: 2,
          coefficient: 2ch,
        ),
      ),
      logical: (
        default: md,
      ),
    ),
  ),
  typography: (
    font-family: (
      literal: (
        sans: (
          "Source Sans Pro",
          sans-serif,
        ),
        serif: (
          "Source Serif Pro",
          serif,
        ),
        mono: (
          "Source Code Pro",
          monospace,
        ),
      ),
      logical: (
        body: "serif",
        heading: "sans",
        display: "body",
      ),
    ),
    font-weight: (
      mapped: (
        domain: mapping.$domain-font-weights,
      ),
      logical: (
        body: "regular",
        emphasis: "bold",
        heading: "bold",
      ),
    ),
    letter-spacing: (
      mapped: (
        domain: mapping.$domain-sizes,
        function: meta.get-function("linear", $module: "function"),
        params: (
          slope: 0.025em,
        ),
      ),
      logical: (
        none: md,
      ),
    ),
    line: (
      rlh: $-rlh,
    ),
    measure: (
      mapped: (
        domain: mapping.$domain-sizes,
        // Use square numbers centered around 64ch.
        // math.pow($size + 8, 2) * 1ch;
        function: meta.get-function("polynomial", $module: "function"),
        params: (
          64ch,
          16ch,
          1ch,
        ),
      ),
      literal: (
        full: 100%,
        inf: unset,
      ),
      logical: (
        default: md,
      ),
    ),
    scale: (
      mapped: (
        range: (
          start: -2,
          end: 9,
        ),
        function: meta.get-function("exponential", $module: "function"),
        params: (
          base: $-scale-ratio,
          coefficient: $-scale-base,
        ),
      ),
      literal: (
        ratio: $-scale-ratio,
        smaller: math.div(100%, $-scale-ratio),
        larger: 100% * $-scale-ratio,
      ),
    ),
  ),
  ui: (
    radius: (
      mapped: (
        domain: mapping.$domain-sizes,
        // Use multiples of 0.2rem centered around 0.6rem.
        function: meta.get-function("linear", $module: "function"),
        params: (
          initial: 0.6rem,
          slope: 0.2rem,
        ),
      ),
      literal: (
        ellipse: 100%,
        obround: 999rem,
      ),
    ),
    shadow: (
      mapped: (
        domain: mapping.$domain-sizes,
        function: meta.get-function("shadow", $module: "mapping"),
      ),
    ),
    stroke-width: (
      mapped: (
        range: (
          start: 1,
          end: 8,
        ),
        function: meta.get-function("polynomial", $module: "function"),
        params: (
          0,
          math.div($-rlh, 24),
        ),
      ),
      literal: (),
      logical: (
        default: 2,
      ),
    ),
    stroke-style: (
      literal: (
        default: "solid",
      ),
      logical: (),
    ),
    stroke-color: (
      literal: (
        default: "var(--color-tertiary-700)",
      ),
      logical: (),
    ),
    easing: (
      literal: easing.$penner,
    ),
  ),
  coloring: (
    palettes: (),
    color: (
      literal: (),
      logical: (),
    ),
  ),
);

/// Map of all configuration values merged together.
/// This is used to look up configuration keys.
/// @type Map
/// @requires $default
/// @requires $custom
$merged: map.deep-merge($default, $-custom-with-typography);
