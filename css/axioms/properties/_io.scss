////
/// @group ax-properties
////

/// ## Prop I/O: Read and Write Properties
///
/// On CSS level it can be helpful to adhere to naming conventions for custom properties
/// in order to keep a better overview of their respective origin and purpose. Stylament
/// allows you to define a custom prefix to brand all its system properties and provides
/// shortcuts to reference properties in a prefix-agnostic way.

/// @deprecated Use the public $prop-prefix instead.
///   See https://sass-lang.com/documentation/js-api/interfaces/deprecations/#with_private
$-prefix: "s-" !default;

/// Configurable prefix for system CSS variables.
///
/// Stylament defines a prefix for its **system** (hence `s-`) custom properties by default.
/// This can be replaced by any [valid][spec] identifier part when `@use`-ing this file:
///
/// [spec]: https://drafts.csswg.org/css-variables/#defining-variables
///
/// @example scss - Add custom prefix to all system CSS custom properties
///   @use "stylament/css/axioms/properties/io" with ($prop-prefix: "myBrand-");
///
/// @example scss - Keep all system CSS custom properties un-prefixed
///   @use "stylament/css/axioms/properties/io" with ($prop-prefix: "");
///
/// @example scss - Use a fancy prefix
///   @use "stylament/css/axioms/properties/io" with ($prop-prefix: "ðŸ’…");
///
$prop-prefix: $-prefix !default;

/// Shortcut for system CSS variable prefix.
/// @link https://github.com/picocss/pico/commit/c5a1ffc Credits: Pico CSS
/// @name ðŸŒ±
$ðŸŒ±: --#{$prop-prefix};

/// Shortcut for system CSS variable reference.
/// @param {string} $name The un-prefixed variable name.
/// @param {string} $fallback The custom propertyâ€™s fallback value.
///   Same as [in `var()`](https://developer.mozilla.org/en-US/docs/Web/CSS/var#declaration-value).
/// @return {string} A standard [CSS `var()` reference](https://developer.mozilla.org/en-US/docs/Web/CSS/var).
@function svar($name, $fallback: null) {
  @return if($fallback, var(#{$ðŸŒ±}#{$name}, #{$fallback}), var(#{$ðŸŒ±}#{$name}));
}
