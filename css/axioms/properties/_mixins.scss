////
/// @group ax-properties
////

@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "../tools/arithmetic/function";

/// List CSS custom properties.
///
/// @param {String} $prefix Property name prefix.
/// @param {Map} $properties Map of properties with simple literal values.
/// @output A list of `--<prefix>-*` custom properties with their respective values.
@mixin literal-properties($prefix, $properties) {
  @if $properties {
    @each $name, $value in $properties {
      --#{$prefix}-#{$name}: #{$value};
    }
  }
}

@function -make-domain($base, $range) {
  $step: if(map.has-key($range, step), map.get($range, step), 1);
  $start: if(map.has-key($range, start), map.get($range, start), 1);
  $end: if(
    map.has-key($range, end),
    map.get($range, end),
    if($base, list.length($base), 7)
  );
  $result: ();

  $current: $start;
  @while $current <= $end {
    // Pick current key-value pair from the given domain or from ℤ → ℤ
    $pair: if($base, list.nth($base, $current), "" + $current $current);
    $result: map.set($result, $pair...);

    $current: $current + $step;
  }

  @return $result;
}

/// Map CSS custom properties via a given function.
///
/// @param {String} $prefix Property name prefix.
/// @param {Map} $domain [null] Map of inouts to the mapping function.
/// @param {Map} $range [null] Range limiting the domain.
/// @param {Function} $func [null] Mapping function.
/// @param {Map} $params [null] Parameters to the function.
/// @output A list of `--<prefix>-*` custom properties with their respective calculated values.
@mixin mapped-properties(
  $prefix,
  $domain: null,
  $range: null,
  $func: null,
  $params: null
) {
  $func: if($func, $func, meta.get-function("identity", $module: "function"));
  $domain: if($range, -make-domain($domain, $range), $domain);

  @if $domain {
    @each $name, $arg in $domain {
      --#{$prefix}-#{$name}: #{if(
          $params,
          meta.call($func, $arg, $params...),
          meta.call($func, $arg)
        )};
    }
  }
}

/// Map logical to basic CSS custom properties.
///
/// @param {String} $prefix Property name prefix.
/// @param {Map} $properties Map of logical properties.
/// @output A list of `--<prefix>-*` custom properties referring to others.
@mixin logical-properties($prefix, $properties) {
  @if $properties {
    @each $name, $alias in $properties {
      --#{$prefix}-#{$name}: var(--#{$prefix}-#{$alias});
    }
  }
}

/// Generate all configured CSS custom properties.
///
/// @param {String} $prefix Property name prefix.
/// @param {Map} $conf Configuration map for this set of properties.
/// @output A list of mapped, literal, and logical `--<prefix>-*` custom properties.
@mixin configured-properties($prefix, $conf) {
  @if $conf {
    @include mapped-properties(
      $prefix,
      map.get($conf, mapped, domain),
      map.get($conf, mapped, range),
      map.get($conf, mapped, function),
      map.get($conf, mapped, params)
    );
    @include literal-properties($prefix, map.get($conf, literal));
    @include logical-properties($prefix, map.get($conf, logical));
  }
}
