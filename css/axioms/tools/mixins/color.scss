////
/// @group ax-tools
////

@use "sass:map";
@use "sass:math";
@use "../functions/graph";

/// Generate a color palette for a given hue.
/// @param {String} $name The color name.
/// @param {Number} $hue The color hue (of HSL).
/// @param {List} $s-curve The polynomial coefficients defining the curve described by
///                 cartesian coordinates of palette step and saturation (of HSL).
/// @param {List} $l-curve The polynomial coefficients defining the curve described by
///                 cartesian coordinates of palette step and lightness (of HSL).
/// @output A list of `--color-*` custom properties containing the color values of the palette:
///   ```css
///   --color-red-100: hsl(0deg, 100%, 95%);
///   --color-red-300: hsl(0deg, 95%, 75%);
///   --color-red-500: hsl(0deg, 76%, 57%);
///   --color-red-700: hsl(0deg, 61%, 48%);
///   --color-red-900: hsl(0deg, 50%, 29%);
///   --color-red: var(--color-red-500);
///   ```
@mixin palette($name, $hue, $s-curve, $l-curve, $range) {
  $range: if($range, $range, ());
  $step: if(map.has-key($range, step), map.get($range, step), 0.2);
  $start: if(map.has-key($range, start), map.get($range, start), 0.1);
  $end: if(map.has-key($range, end), map.get($range, end), 0.9);
  $s-curve: if($s-curve, $s-curve, (1, -1, 1));
  $l-curve: if($l-curve, $l-curve, (1, -1));

  $current: $start;
  @while $current <= $end {
    --color-#{$name}-#{math.round(1000 * $current)}: #{hsl(
        $hue,
        100% * graph.polynomial($s-curve, $current),
        100% * graph.polynomial($l-curve, $current)
      )};
    $current: $current + $step;
  }
  --color-#{$name}: var(--color-#{$name}-500);
  // If the palette runs the full range the extrema get aliased “black” and “white”.
  // There should be only palette like this. Otherwise, only the last of them will prevail.
  @if $start == 0 and $end == 1 {
    --color-white: var(--color-grey-0);
    --color-black: var(--color-grey-1000);
  }
}
