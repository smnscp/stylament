////
/// @group ax-tools
////

@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "../functions/graph";

/// Generate a color palette for a given hue.
/// @param {String} $name The color name.
/// @param {Number} $hue The color hue (of HSL).
/// @param {List} $s-curve The polynomial coefficients defining the curve described by
///                 cartesian coordinates of palette step and saturation (of HSL).
/// @param {List} $l-curve The polynomial coefficients defining the curve described by
///                 cartesian coordinates of palette step and lightness (of HSL).
/// @param {List} $sl-curve The control points defining a cubic Bézier in a cartesian
///                 coordinate system of saturation and lightness (of HSL).
///                 If this is definded the other two curves are ignored.
/// @param {Map} $range Start, end, and step-size of the palette.
/// @param {String} $prefix Property name prefix.
/// @output A list of `--<prefix>-*` custom properties containing the color values of the palette:
///   ```css
///   --<prefix>-red-100: hsl(0deg, 100%, 95%);
///   --<prefix>-red-300: hsl(0deg, 95%, 75%);
///   --<prefix>-red-500: hsl(0deg, 76%, 57%);
///   --<prefix>-red-700: hsl(0deg, 61%, 48%);
///   --<prefix>-red-900: hsl(0deg, 50%, 29%);
///   --<prefix>-red: var(--<prefix>-red-500);
///   ```
@mixin palette(
  $name,
  $hue,
  $s-curve,
  $l-curve,
  $sl-curve,
  $range,
  $prefix: "color"
) {
  $range: if($range, $range, ());
  $step: if(map.has-key($range, step), map.get($range, step), 0.2);
  $start: if(map.has-key($range, start), map.get($range, start), 0.1);
  $end: if(map.has-key($range, end), map.get($range, end), 0.9);
  $s-curve: if($s-curve, $s-curve, (1, -1, 1));
  $l-curve: if($l-curve, $l-curve, (1, -1));

  $current: $start;
  @while $current <= $end {
    $saturation: 0;
    $lightness: 0;
    @if $sl-curve {
      $sl: graph.cubic-bezier-2d($current, $sl-curve...);
      $saturation: 100% * list.nth($sl, 1);
      $lightness: 100% * list.nth($sl, 2);
    } @else {
      $saturation: 100% * graph.polynomial($current, $s-curve...);
      $lightness: 100% * graph.polynomial($current, $l-curve...);
    }
    --#{$prefix}-#{$name}-#{math.round(1000 * $current)}: #{hsl(
        $hue,
        $saturation,
        $lightness
      )};
    $current: $current + $step;
  }
  --#{$prefix}-#{$name}: var(--#{$prefix}-#{$name}-500);
  // If the palette runs the full range the extrema get aliased “black” and “white”.
  // There should be only palette like this. Otherwise, only the last of them will prevail.
  @if $start == 0 and $end == 1 {
    --#{$prefix}-white: var(--#{$prefix}-grey-0);
    --#{$prefix}-black: var(--#{$prefix}-grey-1000);
  }
}
