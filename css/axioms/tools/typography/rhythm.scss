////
/// @group ax-tools
////

/// ### Typographical Rhythm

@use "sass:map";
@use "sass:math";

/// Derive root line-height (rlh).
///
/// @param {Number<rem|em|%>} $scale-base Base font-size of the typographical scale.
/// @param {Number} $line-root Relative line-height of the document root.
/// @return {Number<rem>} Root line height. Absolute value mimicking the experimental CSS unit [`rlh`][mdn:rlh].
@function rlh($scale-base, $line-root) {
  $base-unit: math.unit($scale-base);
  $base-rem: if(
    $base-unit == "em",
    $scale-base * math.div(1rem, 1em),
    if($base-unit == "%", $scale-base * math.div(1rem, 100%), $scale-base)
  );
  @return $line-root * $base-rem;
}

/// Baseline grid compatible line height at a given font size.
///
/// @param {Number<rem|em|%>} $em Font size to fit.
/// @param {Number<rem>} $rlh Root line height.
/// @param {Number} $min Minimum line height ratio.
/// @param {Number} $sub The number of line sub-divisions the grid allows.
/// @return {Number<rem|unitless>} The minimum line height that fits the font size.
///         For rem-based font sizes this is also in `rem`, otherwise a unit-less number.
@function grid-line($em, $rlh, $min: 1, $sub: 1) {
  $min: if($min, $min, 1);
  $sub: if($sub, $sub, 1);
  $unit-factor: if(math.unit($em) == "%", 100, 1);
  $line: math.div(
    math.ceil(math.div($em * $min * $sub, $rlh * $unit-factor)) * $rlh * $unit-factor,
    $sub
  );
  @return if(math.unit($line) == "rem", $line, math.div($line, $em));
}
