////
/// @group ax-tools
////

/// ### Map Functions
///
/// Functions for advanced operations on maps.

@use "sass:map";
@use "sass:meta";

/// Translate a map of aliases to values from a dictionary.
/// Each alias is asigned the value of the aliased dictionary key.
///
/// @param {Map} $aliases Map of aliases.
/// @param {Map} $dict Dictionary to look up values.
/// @return {Map} Map with aliases pointing to looked up values.
@function map-aliases($aliases, $dict) {
  $result: ();
  @if $aliases and $dict {
    @each $name, $alias in $aliases {
      $result: map.set($result, $name, map.get($dict, $alias));
    }
  }
  @return $result;
}

/// Translate a map of domain arguments to their values of a given function.
///
/// @param {Map} $domain The domain on which to apply the function.
/// @param {Function} $func Function to apply.
/// @return {Map} Map with domain symbols pointing to their function values.
@function map-function($domain, $func) {
  $result: ();
  @if $domain and $func {
    @each $name, $arg in $domain {
      $result: map.set($result, $name, meta.call($func, $arg));
    }
  }
  @return $result;
}

/// Translate a property configuration to a set of properties.
///
/// @param {Map} $conf Configuration map for this set of properties.
/// @return {Map} A set of mapped, literal, and logical properties.
@function map-config($conf) {
  $map: map.merge(
    map-function(
      map.get($conf, mapped, domain),
      map.get($conf, mapped, function)
    ),
    map.get($conf, literal)
  );
  @return map.merge($map, map-aliases(map.get($conf, logical), $map));
}
