////
/// @group ax-tools
////

/// ## Configuration Functions
///
/// Functions for processing configuration.

@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "../arithmetic/function";
@use "../meta" as meta2;

/// Translate a map of aliases to values from a dictionary.
/// Each alias is asigned the value of the aliased dictionary key.
///
/// @param {Map} $aliases Map of aliases.
/// @param {Map} $dict Dictionary to look up values.
/// @return {Map} Map with aliases pointing to looked up values.
/// @access private
@function -map-aliases($aliases, $dict) {
  $result: ();
  @if $aliases and $dict {
    @each $name, $alias in $aliases {
      $result: map.set($result, $name, map.get($dict, $alias));
    }
  }
  @return $result;
}

/// Apply a range to a given domain.
/// If the domain doesn’t cover the range it will be repeated, adding the current
/// lap count to each domain value and as a prefix to each key. This implies that
/// with no domain given, we can easily use the set of integers (ℤ) as default domain.
/// @param {Map} $base Map of aliases.
/// @param {Map} $range Range limiting the domain.
/// @return {Map} The domain limited by the range.
/// @access private
@function -apply-domain-range($base, $range) {
  $result: ();

  // Use “ℤ” → ℤ as default domain.
  $base: if(
    $base,
    $base,
    (
      "": 0,
    )
  );
  $length: list.length($base);
  $step: if(map.has-key($range, step), map.get($range, step), 1);
  $start: if(map.has-key($range, start), map.get($range, start), 1);
  $end: if(map.has-key($range, end), map.get($range, end), $length);
  $current: $start;
  // If the base domain doesn’t cover the range re-iterate over it.
  $repeat: $start < 1 or $end > $length;
  $lap: math.floor(math.div($start - 1, $length)) + 1;

  @while $current <= $end {
    @if $current > $length * $lap {
      $lap: $lap + 1;
    }
    // Pick current key-value pair from the given domain.
    $pair: list.nth($base, $current - $length * ($lap - 1));
    $key: list.nth($pair, 1);
    $value: list.nth($pair, 2);
    @if $repeat {
      $key: "#{$lap}#{$key}";
      $value: $value + $lap;
    }
    $result: map.set($result, $key, $value);
    $current: $current + $step;
  }

  @return $result;
}

/// Translate a map of domain arguments to their values of a given function.
///
/// @param {Map} $domain [null] The domain on which to apply the function.
/// @param {Map} $range [null] Range limiting the domain.
/// @param {Function} $func [null] Function to apply.
/// @param {Map} $params [null] Parameters to the function.
/// @return {Map} Map with domain symbols pointing to their function values.
@function map-function(
  $domain: null,
  $range: null,
  $func: null,
  $params: null
) {
  $result: ();
  $func: if($func, $func, meta.get-function("identity", $module: "function"));
  $domain: if($range, -apply-domain-range($domain, $range), $domain);
  @if $domain {
    @each $name, $arg in $domain {
      $result: map.set(
        $result,
        $name,
        meta2.call-conditional($func, $arg, $params)
      );
    }
  }
  @return $result;
}

/// Translate a property configuration to a set of properties.
///
/// @param {Map} $conf Configuration map for this set of properties.
/// @return {Map} A set of mapped, literal, and logical properties.
@function map-config($conf) {
  $map: map.merge(
    map-function(
      $domain: map.get($conf, mapped, domain),
      $func: map.get($conf, mapped, function),
      $range: map.get($conf, mapped, range),
      $params: map.get($conf, mapped, params),
    ),
    map.get($conf, literal)
  );
  @return map.merge($map, -map-aliases(map.get($conf, logical), $map));
}
