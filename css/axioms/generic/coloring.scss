////
/// @group ax-generic
////

/// ## Coloring Mixins

@use "sass:map";
@use "../config" as cfg;
@use "../properties/io" as *;

/// Set abstract color properties to the color specified by `$name` and its counterpart (`-contra`).
/// @param {String} $name Name of the color token.
/// @param {String} $default [null] Name of the fall-back color token.
@mixin set-colors($name, $default: null) {
  ---clr-pos: #{svar(color-#{$name}, #{if($default, svar(color-#{$default}), inherit)})};
  ---clr-neg: #{svar(color-#{$name}-contra, #{if($default, svar(color-#{$default}-contra), inherit)})};
}

/// Use abstract color properties as `color` and `background-color`, respectively.
@mixin use-colors {
  color: var(---clr-fg);
  background-color: var(---clr-bg);
}

/// Use abstract color properties as `background-color` and `color` (inverse of `use-colors`), respectively.
@mixin use-colors-inverse {
  color: var(---clr-bg);
  background-color: var(---clr-fg);
}

@mixin alternate-base {
  @include set-colors("alternate");
}

@mixin inverse-base {
  ---clr-fg: var(---clr-neg);
  ---clr-bg: var(---clr-pos);
}

@mixin reverse-base {
  ---clr-fg: var(---clr-pos);
  ---clr-bg: var(---clr-neg);
}

@mixin alternate {
  @include alternate-base;
  @include use-colors;

  $colors: map.get(cfg.$merged, coloring, color, logical);
  @if $colors {
    @if map.get($colors, heading-alternate) {
      :is(h1, h2, h3, h4, h5, h6, hgroup > p) {
        @include set-colors("heading-alternate");
      }
    }
    @if map.get($colors, links-alternate) {
      :where(a:any-link) {
        @include set-colors("links-alternate");
      }
    }
  }
}

@mixin inverse {
  @include use-colors;

  &,
  & *,
  & & &,
  & & & * {
    @include inverse-base;
  }

  & & {
    @include reverse;
  }
}

@mixin reverse {
  @include use-colors;

  &,
  & * {
    @include reverse-base;
  }
}
